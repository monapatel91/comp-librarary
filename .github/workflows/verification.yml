name: Dot Components Verification

on:
  pull_request:

jobs:
  get-version:
    name: Get Version Number for Build
    runs-on: ubuntu-latest
    outputs:
      version-string: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v2

      - name: pr-number-action
        id: get_pr
        uses: kkak10/pr-number-action@v1.3
        if: github.event_name == 'pull_request'

      - name: Get the version
        id: get_version
        shell: bash
        run: |
          if [ $GITHUB_EVENT_NAME == "pull_request" ]
          then
              echo ::set-output name=VERSION::0.0.0.${{ steps.get_pr.outputs.pr }}

          elif [ $GITHUB_EVENT_NAME == "release" ]
          then
              x=${GITHUB_REF/refs\/tags\//}
              y=${x/-nightly/}
              echo ::set-output name=VERSION::$y

          else
              echo ::set-output name=VERSION::0.0.1.0
          fi

  verification:
    name: Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        run: yarn install
      - name: Lint
        run: yarn lint
      - name: Code Format
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            export NX_BASE=remotes/origin/$GITHUB_BASE_REF
          else
            export NX_BASE=$(git rev-parse HEAD~1)
          fi
          echo "Base => $NX_BASE"
          yarn format:check --base=$NX_BASE
      - name: Build
        run: yarn build
        env:
          CI: true
      - name: Unit Tests
        run: yarn test
        env:
          CI: true
      - name: e2e
        run: yarn e2e:ci
        env:
          CI: true

  build-preview:
    needs: [get-version]
    name: Build and Publish Preview Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build and push Docker images for Storybook
        uses: kciter/aws-ecr-action@7ea3f73762295bdbee44242a87de3831f64b4e8f
        with:
          access_key_id: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: storybook
          region: ${{ secrets.AWS_REGION }}
          dockerfile: Dockerfile
          tags: ${{needs.get-version.outputs.version-string}}

  deploy-pr:
    needs: [build-preview, get-version, verification]
    name: Deploy PR to EKS
    runs-on: ubuntu-latest
    environment:
      name: preview
      url: https://ux-pr${{ steps.get_pr.outputs.pr }}.lisbon-dev.com/

    steps:
      - uses: actions/checkout@v2

      - name: pr-number-action
        id: get_pr
        uses: kkak10/pr-number-action@v1.3
        if: github.event_name == 'pull_request'

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: helm deploy storybook
        uses: koslibpro/helm-eks-action@v1.7.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.EKS_CONFIG }}
        with:
          command: helm upgrade ux-pr${{ steps.get_pr.outputs.pr }} --install --create-namespace --namespace=ux-pr${{ steps.get_pr.outputs.pr }} --set image.tag=${{needs.get-version.outputs.version-string}} --set image.sha=${{github.sha}} build/helm/storybook

      - name: Add comment to PR
        uses: github-actions-up-and-running/pr-comment@v1.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: 'SHA: ${{github.sha}} has been built and deployed to the test environment. Storybook URL: https://ux-pr${{ steps.get_pr.outputs.pr }}.lisbon-dev.com/ '
